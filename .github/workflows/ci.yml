name: CI

on:
  push:
    branches:
      - main
      - master
      - work
  pull_request:

jobs:
  build-and-test:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npx playwright install --with-deps chromium

      - name: Install Playwright browsers
        if: matrix.os != 'ubuntu-latest'
        run: npx playwright install chromium

      - name: Configure Windows code signing
        if: matrix.os == 'windows-latest' && secrets.WINDOWS_CERT_BASE64 != ''
        shell: pwsh
        run: |
          $certPath = Join-Path $env:RUNNER_TEMP 'windows-codesign.pfx'
          [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_CERT_BASE64))
          "CSC_LINK=file://$certPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "CSC_KEY_PASSWORD=$env:WINDOWS_CERT_PASSWORD" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:WINDOWS_CERT_SUBJECT) {
            "WINDOWS_CERT_SUBJECT=$env:WINDOWS_CERT_SUBJECT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          WINDOWS_CERT_SUBJECT: ${{ secrets.WINDOWS_CERT_SUBJECT }}

      - name: Configure macOS signing and notarization
        if: matrix.os == 'macos-latest' && secrets.APPLE_ID != ''
        run: |
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> "$GITHUB_ENV"
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> "$GITHUB_ENV"
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> "$GITHUB_ENV"
          echo "CSC_IDENTITY_AUTO_DISCOVERY=false" >> "$GITHUB_ENV"
          if [ -n "${{ secrets.MAC_CERT_BASE64 }}" ]; then
            CERT_PATH="$RUNNER_TEMP/mac-codesign.p12"
            echo "${{ secrets.MAC_CERT_BASE64 }}" | base64 --decode > "$CERT_PATH"
            KEYCHAIN="$RUNNER_TEMP/pacman-signing.keychain-db"
            KEYCHAIN_PASSWORD=$(uuidgen)
            security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
            security set-keychain-settings -lut 21600 "$KEYCHAIN"
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
            security import "$CERT_PATH" -k "$KEYCHAIN" -P "${{ secrets.MAC_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productsign
            security list-keychain -d user -s "$KEYCHAIN" login.keychain
            echo "CSC_LINK=file://$CERT_PATH" >> "$GITHUB_ENV"
            echo "CSC_KEY_PASSWORD=${{ secrets.MAC_CERT_PASSWORD }}" >> "$GITHUB_ENV"
            echo "CSC_KEYCHAIN=$KEYCHAIN" >> "$GITHUB_ENV"
            echo "CSC_KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> "$GITHUB_ENV"
          fi
        shell: bash

      - name: Run tests
        run: npm test

      - name: Run Playwright end-to-end tests
        run: npm run test:playwright
        env:
          PLAYWRIGHT_REQUIRED: '1'

      - name: Build web assets
        run: npm run build

      - name: Run Electron smoke test (macOS/Linux)
        if: matrix.os != 'windows-latest'
        run: npm run electron:smoke
        env:
          ELECTRON_SMOKE_REQUIRED: '1'

      - name: Run Electron smoke test (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron:smoke
        env:
          ELECTRON_SMOKE_REQUIRED: '1'

      - name: Upload smoke telemetry
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: electron-smoke-telemetry-${{ matrix.os }}
          path: artifacts/telemetry/*.json
          if-no-files-found: warn

      - name: Build Electron artifacts
        run: npm run electron:build

      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-artifacts-${{ matrix.os }}
          path: release/**
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Download packaged artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: List downloaded files
        run: ls -R release-artifacts

      - name: Determine release channel
        id: release_channel
        run: |
          if [[ "$REF_NAME" == *-* ]]; then
            echo "channel=prerelease" >> "$GITHUB_OUTPUT"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "channel=stable" >> "$GITHUB_OUTPUT"
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash
        env:
          REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**
          draft: false
          prerelease: ${{ steps.release_channel.outputs.prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
